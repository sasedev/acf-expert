<?php

namespace Acf\DataBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Acf\DataBundle\Entity\Company;
use Acf\DataBundle\Entity\Docgroup;

/**
 * DocgroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocgroupRepository extends EntityRepository
{

	/**
	 * All count
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:,
	 *		 \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function countRoots(Company $c = null)
	{
		if (null == $c) {
			$qb = $this->createQueryBuilder('d')->select('count(d)')->where('d.parent is NULL');
			$query = $qb->getQuery();
		} else {
			$qb = $this->createQueryBuilder('d')->select('count(d)')->join('d.company', 'c')->where('d.parent is NULL')->andWhere('c.id = :id')->setParameter('id', $c->getId());
			$query = $qb->getQuery();
		}

		return $query->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getRootsQuery(Company $c = null)
	{
		if (null == $c) {
			$qb = $this->createQueryBuilder('d')
				->where('d.parent is NULL')
				->orderBy('d.label', 'ASC');
		} else {
			$qb = $this->createQueryBuilder('d')
				->join('d.company', 'c')
				->where('d.parent is NULL')
				->andWhere('c.id = :id')
				->orderBy('d.label', 'ASC')
				->setParameter('id', $c->getId());
		}
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getRoots(Company $c = null)
	{
		return $this->getRootsQuery($c)->execute();
	}

	/**
	 * All count
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:,
	 *		 \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function countAll(Company $c = null)
	{
		if (null == $c) {
			$qb = $this->createQueryBuilder('d')->select('count(d)');
			$query = $qb->getQuery();
		} else {
			$qb = $this->createQueryBuilder('d')->select('count(d)')->join('d.company', 'c')->where('c.id = :id')->setParameter('id', $c->getId());
			$query = $qb->getQuery();
		}

		return $query->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllQuery(Company $c = null)
	{
		if (null == $c) {
			$qb = $this->createQueryBuilder('d')
				->orderBy('d.pageUrlFull', 'ASC');
		} else {
			$qb = $this->createQueryBuilder('d')
				->join('d.company', 'c')
				->where('c.id = :id')
				->orderBy('d.pageUrlFull', 'ASC')
				->setParameter('id', $c->getId());
		}
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAll(Company $c = null)
	{
		return $this->getAllQuery($c)->execute();
	}

	/**
	 * All count
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed, mixed, multitype:,
	 *		 \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function countAllChilds(Docgroup $dg)
	{
		$c = $dg->getCompany();
		$qb = $this->createQueryBuilder('d')->select('count(d)')
			->join('d.company', 'c')
			->where('c.id = :cid')
			->andWhere('d.pageUrlFull LIKE :url')
			->andWhere('d.id != :did')
			->setParameter('cid', $c->getId())
			->setParameter('url', $dg->getPageUrlFull().'%')
			->setParameter('did', $dg->getId());
		$query = $qb->getQuery();

		return $query->getSingleScalarResult();
	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllChildsQuery(Docgroup $dg)
	{
		$c = $dg->getCompany();
		$qb = $this->createQueryBuilder('d')
			->join('d.company', 'c')
			->where('c.id = :cid')
			->andWhere('d.pageUrlFull LIKE :url')
			->andWhere('d.id != :did')
			->orderBy('d.pageUrlFull', 'ASC')
			->setParameter('cid', $c->getId())
			->setParameter('url', $dg->getPageUrlFull().'%')
			->setParameter('did', $dg->getId());
		$query = $qb->getQuery();

		return $query;
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllChilds(Docgroup $dg)
	{
		return $this->getAllChildsQuery($dg)->execute();
	}
}
