<?php
namespace Acf\DataBundle\Repository;

use Acf\DataBundle\Entity\AoCateg;
use Acf\DataBundle\Entity\AoSubCateg;
use Doctrine\ORM\EntityRepository;
use Acf\DataBundle\Entity\AoCallfortender;

/**
 * AoCallfortenderRepository
 * This class was generated by the Doctrine ORM.
 * Add your own custom
 * repository methods below.
 */
class AoCallfortenderRepository extends EntityRepository
{

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllQuery()
    {
        $qb = $this->createQueryBuilder('a')->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAll()
    {
        return $this->getAllQuery()->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllFrontQuery()
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', AoCallfortender::STATUS_SHOW)
            ->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAllFront()
    {
        return $this->getAllFrontQuery()->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getSearchFrontQuery($data)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', AoCallfortender::STATUS_SHOW)
            ->orderBy('a.dtPublication', 'DESC');
        if (\is_array($data)) {
            if (isset($data['country']) && $data['country'] != null) {
                $qb->andWhere('LOWER(a.country) LIKE :country');
                $qb->setParameter('country', '%' . \strtolower(\trim($data['country'])) . '%');
            }
            if (isset($data['grp']) && $data['grp'] != null) {
                $qb->andWhere('a.grp = :grp');
                $qb->setParameter('grp', $data['grp']);
            }
            if (isset($data['typeAvis']) && $data['typeAvis'] != null) {
                $qb->andWhere('a.typeAvis = :typeAvis');
                $qb->setParameter('typeAvis', $data['typeAvis']);
            }
            if (isset($data['nature']) && $data['nature'] != null) {
                $qb->andWhere('a.nature = :nature');
                $qb->setParameter('nature', $data['nature']);
            }
            if (isset($data['dtPublicationBegin']) && $data['dtPublicationBegin'] != null) {
                $qb->andWhere('a.dtPublication >= :dtPublicationBegin');
                $qb->setParameter('dtPublicationBegin', $data['dtPublicationBegin']);
            }
            if (isset($data['dtPublicationEnd']) && $data['dtPublicationEnd'] != null) {
                $qb->andWhere('a.dtPublication <= :dtPublicationEnd');
                $qb->setParameter('dtPublicationEnd', $data['dtPublicationEnd']);
            }
            if (isset($data['dtEndBegin']) && $data['dtEndBegin'] != null) {
                $qb->andWhere('a.dtEnd >= :dtEndBegin');
                $qb->setParameter('dtEndBegin', $data['dtEndBegin']);
            }
            if (isset($data['dtEndEnd']) && $data['dtEndEnd'] != null) {
                $qb->andWhere('a.dtEnd <= :dtEndEnd');
                $qb->setParameter('dtEndEnd', $data['dtEndEnd']);
            }
        }

        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getSearchFront($data)
    {
        return $this->getSearchFrontQuery($data)->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllFrontByCategQuery(AoCateg $categ)
    {
        $qb = $this->createQueryBuilder('a')
            ->join('a.grp', 'sc')
            ->join('sc.categ', 'c')
            ->where('a.status = :status')
            ->andWhere('c.id = :cid')
            ->setParameter('status', AoCallfortender::STATUS_SHOW)
            ->setParameter('cid', $categ->getId())
            ->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAllFrontByCateg(AoCateg $categ)
    {
        return $this->getAllFrontByCategQuery($categ)->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllFrontByGrpQuery(AoSubCateg $grp)
    {
        $qb = $this->createQueryBuilder('a')
            ->join('a.grp', 'sc')
            ->where('a.status = :status')
            ->andWhere('sc.id = :scid')
            ->setParameter('status', AoCallfortender::STATUS_SHOW)
            ->setParameter('scid', $grp->getId())
            ->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAllFrontByGrp(AoSubCateg $grp)
    {
        return $this->getAllFrontByGrpQuery($grp)->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllNewsletterQuery(AoSubCateg $grp)
    {
        $today = new \DateTime('now');
        $yesterday = new \DateTime('now');
        $yesterday = $yesterday->modify('-1 day');
        $qb = $this->createQueryBuilder('a')
            ->join('a.grp', 'sc')
            ->where('a.status = :status')
            ->andWhere('sc.id = :scid')
            ->andWhere('a.dtCrea >= :yesterday')
            ->andWhere('a.dtCrea <= :today')
            ->setParameter('status', AoCallfortender::STATUS_SHOW)
            ->setParameter('scid', $grp->getId())
            ->setParameter('yesterday', $yesterday)
            ->setParameter('today', $today)
            ->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAllNewsletter(AoSubCateg $grp)
    {
        return $this->getAllNewsletterQuery($grp)->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @param AoSubCateg $grp
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllByGrpQuery(AoSubCateg $grp)
    {
        $qb = $this->createQueryBuilder('a')
            ->join('a.grp', 'sc')
            ->where('sc.id = :id')
            ->orderBy('a.dtPublication', 'DESC')
            ->setParameter('id', $grp->getId());
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @param AoSubCateg $grp
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAllByGrp(AoSubCateg $grp)
    {
        return $this->getAllByGrpQuery($grp)->execute();
    }

    /**
     * Get Query for Next Element
     *
     * @param AoCallfortender $callfortender
     *
     * @return \Doctrine\ORM\Query
     */
    public function getNextByIdQuery(AoCallfortender $callfortender)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.ref > :ref')
            ->orderBy('a.ref', 'ASC')
            ->setMaxResults(1)
            ->setParameter('ref', $callfortender->getRef());
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get Query for Next Element
     *
     * @param AoCallfortender $callfortender
     *
     * @return \Doctrine\ORM\Query
     */
    public function getNextById(AoCallfortender $callfortender)
    {
        return $this->getNextByIdQuery($callfortender)->getOneOrNullResult();
    }

    /**
     * Get Query for Next Element
     *
     * @param AoCallfortender $callfortender
     *
     * @return \Doctrine\ORM\Query
     */
    public function getPrevByIdQuery(AoCallfortender $callfortender)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.ref < :ref')
            ->orderBy('a.ref', 'DESC')
            ->setMaxResults(1)
            ->setParameter('ref', $callfortender->getRef());
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get Query for Next Element
     *
     * @param AoCallfortender $callfortender
     *
     * @return \Doctrine\ORM\Query
     */
    public function getPrevById(AoCallfortender $callfortender)
    {
        return $this->getPrevByIdQuery($callfortender)->getOneOrNullResult();
    }
}

