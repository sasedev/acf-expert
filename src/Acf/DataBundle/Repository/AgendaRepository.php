<?php
namespace Acf\DataBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Acf\DataBundle\Entity\User;

/**
 * AgendaRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgendaRepository extends EntityRepository
{

    /**
     * Get Query for All Entity For User By week and year
     *
     * @param integer $year
     * @param integer $week
     * @param User    $user
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllByYearWeekUserQuery($year, $week, User $user)
    {
        $dtStart = new \DateTime();
        $dtStart->setISODate($year, $week);
        $dtStart->setTime(0, 0, 0);

        $nextweek = $week + 1;
        $nextyear = $year;

        $date = new \DateTime();
        $date->setISODate($year, 53);
        $weeksinyear = $date->format('W') === '53' ? 53 : 52;

        if ($nextweek > $weeksinyear) {
            $nextyear++;
            $nextweek = 1;
        }

        $dtEnd = new \DateTime();
        $dtEnd->setISODate($nextyear, $nextweek);
        $dtEnd->setTime(0, 0, 0);

        $dql = 'SELECT DISTINCT ag
            FROM Acf\DataBundle\Entity\Agenda AS ag
            LEFT JOIN ag.users AS au
            WHERE
                (ag.user = :user OR au = :user)
            AND
                (
                    (ag.dtStart >= :dtStart AND ag.dtStart < :dtEnd)
                    OR
                    (ag.dtEnd > :dtStart AND ag.dtEnd <= :dtEnd)
                )
            ORDER BY ag.dtStart ASC';

        $query = $this->getEntityManager()
            ->createQuery($dql)
            ->setParameter('user', $user)
            ->setParameter('dtStart', $dtStart)
            ->setParameter('dtEnd', $dtEnd);

        return $query;
    }

    /**
     * Get All Entity For User By week and year
     *
     * @param integer $year
     * @param integer $week
     * @param User    $user
     *
     * @return Ambigous <\Doctrine\ORM\mixed,
     *         \Doctrine\ORM\Internal\Hydration\mixed,
     *         \Doctrine\DBAL\Driver\Statement,
     *         \Doctrine\Common\Cache\mixed>
     */
    public function getAllByYearWeekUser($year, $week, User $user)
    {
        return $this->getAllByYearWeekUserQuery($year, $week, $user)->execute();
    }

    /**
     * Get Query for All Entity For User By week and year
     *
     * @param User $user
     *
     * @return \Doctrine\ORM\Query
     */
    public function getNextByUserQuery(User $user)
    {
        $dtStart = new \DateTime('now');
        $dtStart->setTime(0, 0, 0);

        $dtEnd = new \DateTime('now');
        $dtEnd->setTime(0, 0, 0);
        $dtEnd->modify('+10 days');

        $dql = 'SELECT DISTINCT ag
            FROM Acf\DataBundle\Entity\Agenda AS ag
            LEFT JOIN ag.users AS au
            WHERE
                (ag.user = :user OR au = :user)
            AND
                (
                    (ag.dtStart >= :dtStart AND ag.dtStart < :dtEnd)
                    OR
                    (ag.dtEnd > :dtStart AND ag.dtEnd <= :dtEnd)
                )
            ORDER BY ag.dtStart ASC';

        $query = $this->getEntityManager()
            ->createQuery($dql)
            ->setParameter('user', $user)
            ->setParameter('dtStart', $dtStart)
            ->setParameter('dtEnd', $dtEnd);

        return $query;
    }

    /**
     * Get All Entity For User By week and year
     * @param User $user
     *
     * @return Ambigous <\Doctrine\ORM\mixed,
     *         \Doctrine\ORM\Internal\Hydration\mixed,
     *         \Doctrine\DBAL\Driver\Statement,
     *         \Doctrine\Common\Cache\mixed>
     */
    public function getNextByUser(User $user)
    {
        return $this->getNextByUserQuery($user)->execute();
    }
}