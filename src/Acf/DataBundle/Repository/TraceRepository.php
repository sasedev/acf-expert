<?php

namespace Acf\DataBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Acf\DataBundle\Entity\User;
use Acf\DataBundle\Entity\Company;
use Acf\DataBundle\Entity\Trace;
use Acf\DataBundle\Entity\Job;
use Acf\DataBundle\Entity\CompanyType;
use Acf\DataBundle\Entity\Sector;

/**
 * TraceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TraceRepository extends EntityRepository
{

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllQuery(\DateTime $minDtCrea = null)
	{
		if (null == $minDtCrea) {
			return $this->createQueryBuilder('t')
				->orderBy('t.dtCrea', 'ASC')
				->addOrderBy('t.actionType', 'ASC')
				->addOrderBy('t.actionEntity', 'ASC')
				->getQuery();
		} else {
			return $this->createQueryBuilder('t')
				->where('t.dtCrea >= :minDate')
				->orderBy('t.dtCrea', 'ASC')
				->addOrderBy('t.actionType', 'ASC')
				->addOrderBy('t.actionEntity', 'ASC')
				->setParameter('minDate', $minDtCrea)
				->getQuery();
		}

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAll(\DateTime $minDtCrea = null)
	{

		return $this->getAllQuery($minDtCrea)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByAdminQuery(User $user, \DateTime $minDtCrea = null)
	{
		$companies = $user->getAdmCompanies();
		if (null == $companies || \count($companies) == 0) {
			if (null == $minDtCrea) {
				return $this->createQueryBuilder('t')
					->where('t.companyId IN (:companyIds)')
					->andWhere('t.actionEntity NOT IN (:entities)')
					->orderBy('t.dtCrea', 'ASC')
					->addOrderBy('t.actionType', 'ASC')
					->addOrderBy('t.actionEntity', 'ASC')
					->setParameter('companyIds', NULL)
					->setParameter('entities', array(Trace::AE_DOCGROUPSYST, Trace::AE_DOCGROUPAUDIT, Trace::AE_SHAREHOLDER, Trace::AE_PILOT, Trace::AE_CUSER, Trace::AE_CADMIN))
					->getQuery();
			} else {
				return $this->createQueryBuilder('t')
					->where('t.companyId IN (:companyIds)')
					->andWhere('t.actionEntity NOT IN (:entities)')
					->andWhere('t.dtCrea >= :minDate')
					->orderBy('t.dtCrea', 'ASC')
					->addOrderBy('t.actionType', 'ASC')
					->addOrderBy('t.actionEntity', 'ASC')
					->setParameter('companyIds', NULL)
					->setParameter('entities', array(Trace::AE_DOCGROUPSYST, Trace::AE_DOCGROUPAUDIT, Trace::AE_SHAREHOLDER, Trace::AE_PILOT, Trace::AE_CUSER, Trace::AE_CADMIN))
					->setParameter('minDate', $minDtCrea)
					->getQuery();
			}

		} else {
			$cIds = array();
			foreach ($companies as $company) {
				$cIds[] = $company->getId();
			}
			if (null == $minDtCrea) {
				return $this->createQueryBuilder('t')
					->where('t.companyId IN (:companyIds)')
					->andWhere('t.actionEntity NOT IN (:entities)')
					->orderBy('t.dtCrea', 'ASC')
					->addOrderBy('t.actionType', 'ASC')
					->addOrderBy('t.actionEntity', 'ASC')
					->setParameter('companyIds', $cIds)
					->setParameter('entities', array(Trace::AE_DOCGROUPSYST, Trace::AE_DOCGROUPAUDIT, Trace::AE_SHAREHOLDER, Trace::AE_PILOT, Trace::AE_CUSER, Trace::AE_CADMIN))
					->getQuery();
			} else {
				return $this->createQueryBuilder('t')
					->where('t.companyId IN (:companyIds)')
					->andWhere('t.actionEntity NOT IN (:entities)')
					->andWhere('t.dtCrea >= :minDate')
					->orderBy('t.dtCrea', 'ASC')
					->addOrderBy('t.actionType', 'ASC')
					->addOrderBy('t.actionEntity', 'ASC')
					->setParameter('companyIds', $cIds)
					->setParameter('entities', array(Trace::AE_DOCGROUPSYST, Trace::AE_DOCGROUPAUDIT, Trace::AE_SHAREHOLDER, Trace::AE_PILOT, Trace::AE_CUSER, Trace::AE_CADMIN))
					->setParameter('minDate', $minDtCrea)
					->getQuery();
			}


		}

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByAdmin(User $user, \DateTime $minDtCrea = null)
	{

		return $this->getAllByAdminQuery($user, $minDtCrea)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByUserQuery(User $entity)
	{
		return $this->createQueryBuilder('t')
		->where('t.actionEntity = :entityType')
		->andWhere('t.actionId = :aId')
		->orderBy('t.dtCrea', 'ASC')
		->addOrderBy('t.actionType', 'ASC')
		->addOrderBy('t.actionEntity', 'ASC')
		->setParameter('entityType', Trace::AE_USER)
		->setParameter('aId', $entity->getId())
		->getQuery();

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByUser(User $entity)
	{

		return $this->getAllByUserQuery($entity)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByJobQuery(Job $entity)
	{
		return $this->createQueryBuilder('t')
		->where('t.actionEntity = :entityType')
		->andWhere('t.actionId = :aId')
		->orderBy('t.dtCrea', 'ASC')
		->addOrderBy('t.actionType', 'ASC')
		->addOrderBy('t.actionEntity', 'ASC')
		->setParameter('entityType', Trace::AE_JOB)
		->setParameter('aId', $entity->getId())
		->getQuery();

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByJob(Job $entity)
	{

		return $this->getAllByJobQuery($entity)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByCompanyTypeQuery(CompanyType $entity)
	{
		return $this->createQueryBuilder('t')
		->where('t.actionEntity = :entityType')
		->andWhere('t.actionId = :aId')
		->orderBy('t.dtCrea', 'ASC')
		->addOrderBy('t.actionType', 'ASC')
		->addOrderBy('t.actionEntity', 'ASC')
		->setParameter('entityType', Trace::AE_TYPE)
		->setParameter('aId', $entity->getId())
		->getQuery();

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByCompanyType(CompanyType $entity)
	{

		return $this->getAllByCompanyTypeQuery($entity)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllBySectorQuery(Sector $entity)
	{
		return $this->createQueryBuilder('t')
		->where('t.actionEntity = :entityType')
		->andWhere('t.actionId = :aId')
		->orderBy('t.dtCrea', 'ASC')
		->addOrderBy('t.actionType', 'ASC')
		->addOrderBy('t.actionEntity', 'ASC')
		->setParameter('entityType', Trace::AE_SECTOR)
		->setParameter('aId', $entity->getId())
		->getQuery();

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllBySector(Sector $entity)
	{

		return $this->getAllBySectorQuery($entity)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByCompanyQuery(Company $company, $showall = true)
	{
		$qb = $this->createQueryBuilder('t')
			->where('t.companyId = :companyId')
			->orderBy('t.dtCrea', 'ASC')
			->addOrderBy('t.actionType', 'ASC')
			->addOrderBy('t.actionEntity', 'ASC')
			->setParameter('companyId', $company->getId());
		if ($showall == false) {
			$qb->andWhere('t.actionEntity NOT IN (:entities)');
			$qb->setParameter('entities', array(Trace::AE_DOCGROUPSYST, Trace::AE_DOCGROUPAUDIT, Trace::AE_SHAREHOLDER, Trace::AE_PILOT, Trace::AE_CUSER, Trace::AE_CADMIN));
		}
		return $qb->getQuery();
	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByCompany(Company $company, $showall = true)
	{

		return $this->getAllByCompanyQuery($company, $showall)->execute();

	}

	/**
	 * Get Query for All Entities
	 *
	 * @return \Doctrine\ORM\Query
	 */
	public function getAllByEntityIdQuery($entity_id, $entity_type)
	{
		return $this->createQueryBuilder('t')
		->where('t.actionEntity = :entityType OR t.actionEntity2 = :entityType OR t.actionEntity3 = :entityType OR t.actionEntity4 = :entityType')
		->andWhere('t.actionId = :aId OR t.actionId2 = :aId OR t.actionId3 = :aId OR t.actionId4 = :aId')
		->orderBy('t.dtCrea', 'ASC')
		->addOrderBy('t.actionType', 'ASC')
		->addOrderBy('t.actionEntity', 'ASC')
		->setParameter('entityType', $entity_type)
		->setParameter('aId', $entity_id)
		->getQuery();

	}

	/**
	 * Get All Entities
	 *
	 * @return Ambigous <\Doctrine\ORM\mixed,
	 *		 \Doctrine\ORM\Internal\Hydration\mixed,
	 *		 \Doctrine\DBAL\Driver\Statement,
	 *		 \Doctrine\Common\Cache\mixed>
	 */
	public function getAllByEntityId($entity_id, $entity_type)
	{

		return $this->getAllByEntityIdQuery($entity_id, $entity_type)->execute();

	}
}
