<?php
namespace Acf\DataBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Acf\DataBundle\Entity\AoAuction;

/**
 * AoAuctionRepository
 * This class was generated by the Doctrine ORM.
 * Add your own custom
 * repository methods below.
 */
class AoAuctionRepository extends EntityRepository
{

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllQuery()
    {
        $qb = $this->createQueryBuilder('a')->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAll()
    {
        return $this->getAllQuery()->execute();
    }

    /**
     * Get Query for All Entities
     *
     * @return \Doctrine\ORM\Query
     */
    public function getAllFrontQuery()
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.status = :status')
            ->setParameter('status', AoAuction::STATUS_SHOW)
            ->orderBy('a.dtPublication', 'DESC');
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get All Entities
     *
     * @return mixed|\Doctrine\DBAL\Driver\Statement|array|NULL
     */
    public function getAllFront()
    {
        return $this->getAllFrontQuery()->execute();
    }

    /**
     * Get Query for Next Element
     *
     * @param AoAuction $auction
     *
     * @return \Doctrine\ORM\Query
     */
    public function getNextByIdQuery(AoAuction $auction)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.ref > :ref')
            ->orderBy('a.ref', 'ASC')
            ->setMaxResults(1)
            ->setParameter('ref', $auction->getRef());
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get Query for Next Element
     *
     * @param AoAuction $auction
     *
     * @return \Doctrine\ORM\Query
     */
    public function getNextById(AoAuction $auction)
    {
        return $this->getNextByIdQuery($auction)->getOneOrNullResult();
    }

    /**
     * Get Query for Next Element
     *
     * @param AoAuction $auction
     *
     * @return \Doctrine\ORM\Query
     */
    public function getPrevByIdQuery(AoAuction $auction)
    {
        $qb = $this->createQueryBuilder('a')
            ->where('a.ref < :ref')
            ->orderBy('a.ref', 'DESC')
            ->setMaxResults(1)
            ->setParameter('ref', $auction->getRef());
        $query = $qb->getQuery();

        return $query;
    }

    /**
     * Get Query for Next Element
     *
     * @param AoAuction $auction
     *
     * @return \Doctrine\ORM\Query
     */
    public function getPrevById(AoAuction $auction)
    {
        return $this->getPrevByIdQuery($auction)->getOneOrNullResult();
    }
}

